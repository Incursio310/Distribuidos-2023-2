// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: Proto/central.proto

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CentralServiceClient is the client API for CentralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentralServiceClient interface {
	KeyReleaseAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*CreateAnnouncementResponse, error)
	NonMatchedUsers(ctx context.Context, in *CreateUsersRequest, opts ...grpc.CallOption) (*CreateUsersResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Calculate(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type centralServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralServiceClient(cc grpc.ClientConnInterface) CentralServiceClient {
	return &centralServiceClient{cc}
}

func (c *centralServiceClient) KeyReleaseAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*CreateAnnouncementResponse, error) {
	out := new(CreateAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/grpc.CentralService/KeyReleaseAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralServiceClient) NonMatchedUsers(ctx context.Context, in *CreateUsersRequest, opts ...grpc.CallOption) (*CreateUsersResponse, error) {
	out := new(CreateUsersResponse)
	err := c.cc.Invoke(ctx, "/grpc.CentralService/NonMatchedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/grpc.CentralService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralServiceClient) Calculate(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.CentralService/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralServiceServer is the server API for CentralService service.
// All implementations must embed UnimplementedCentralServiceServer
// for forward compatibility
type CentralServiceServer interface {
	KeyReleaseAnnouncement(context.Context, *CreateAnnouncementRequest) (*CreateAnnouncementResponse, error)
	NonMatchedUsers(context.Context, *CreateUsersRequest) (*CreateUsersResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Calculate(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedCentralServiceServer()
}

// UnimplementedCentralServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCentralServiceServer struct {
}

func (UnimplementedCentralServiceServer) KeyReleaseAnnouncement(context.Context, *CreateAnnouncementRequest) (*CreateAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyReleaseAnnouncement not implemented")
}
func (UnimplementedCentralServiceServer) NonMatchedUsers(context.Context, *CreateUsersRequest) (*CreateUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NonMatchedUsers not implemented")
}
func (UnimplementedCentralServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCentralServiceServer) Calculate(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedCentralServiceServer) mustEmbedUnimplementedCentralServiceServer() {}

// UnsafeCentralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentralServiceServer will
// result in compilation errors.
type UnsafeCentralServiceServer interface {
	mustEmbedUnimplementedCentralServiceServer()
}

func RegisterCentralServiceServer(s grpc.ServiceRegistrar, srv CentralServiceServer) {
	s.RegisterService(&CentralService_ServiceDesc, srv)
}

func _CentralService_KeyReleaseAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralServiceServer).KeyReleaseAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CentralService/KeyReleaseAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralServiceServer).KeyReleaseAnnouncement(ctx, req.(*CreateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralService_NonMatchedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralServiceServer).NonMatchedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CentralService/NonMatchedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralServiceServer).NonMatchedUsers(ctx, req.(*CreateUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CentralService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralService_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralServiceServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CentralService/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralServiceServer).Calculate(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CentralService_ServiceDesc is the grpc.ServiceDesc for CentralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CentralService",
	HandlerType: (*CentralServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeyReleaseAnnouncement",
			Handler:    _CentralService_KeyReleaseAnnouncement_Handler,
		},
		{
			MethodName: "NonMatchedUsers",
			Handler:    _CentralService_NonMatchedUsers_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CentralService_Create_Handler,
		},
		{
			MethodName: "Calculate",
			Handler:    _CentralService_Calculate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/central.proto",
}
